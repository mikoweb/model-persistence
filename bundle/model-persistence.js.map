{"version":3,"file":"model-persistence.js","sources":["../src/core/Interface.js","../src/locator/LocatorInterface.js","../src/model-manager/ModelManagerInterface.js","../src/repository/RepositoryInterface.js","../src/locator/LocatorAbstract.js","../src/model-manager/HTTPModelManager.js","../src/repository/HTTPRepository.js","../src/locator/HTTPLocatorAbstract.js","../src/http/createClient.js","../src/factory/HTTPFactory.js","../src/factory/http.js","../src/index.js"],"sourcesContent":["export default class Interface {\n    defineInterfaceMethod() {\n        throw new Error('Class should implement this method');\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Data locator.\n */\nexport default class LocatorInterface extends Interface {\n    /**\n     * Locate place where model is storage.\n     *\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {string}\n     */\n    locate(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Locate place by id.\n     *\n     * @param id\n     * @param {Object} [options]\n     * @return {string}\n     */\n    locateById(id, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Name of id property.\n     *\n     * @return {string}\n     */\n    getIdPropName() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Get id from model.\n     *\n     * @param {Model} model\n     * @return {*}\n     */\n    getModelId(model) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Is empty model id?\n     *\n     * @param {Model} model\n     * @return {boolean}\n     */\n    isEmptyModelId(model) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * ModelManagerClass related to this locator.\n     *\n     * @return {ModelManagerInterface.prototype}\n     */\n    getModelManagerClass() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * RepositoryClass related to this locator.\n     *\n     * @return {RepositoryInterface.prototype}\n     */\n    getRepositoryClass() {\n        this.defineInterfaceMethod();\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Data persistence layer.\n */\nexport default class ModelManagerInterface extends Interface {\n    /**\n     * Get model by id from storage.\n     *\n     * @async\n     * @param id\n     * @param {Model.prototype} modelClass\n     * @param {Object} [options]\n     * @return {Promise.<Model>}\n     */\n    get(id, modelClass, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Save model to storage.\n     *\n     * @async\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {Promise.<Boolean>}\n     */\n    save(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Remove model from storage.\n     *\n     * @async\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {Promise.<Boolean>}\n     */\n    remove(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Repository pattern - data collection.\n */\nexport default class RepositoryInterface extends Interface {\n    /**\n     * Find one model by id from storage.\n     *\n     * @async\n     * @param id\n     * @return {Promise.<Model>}\n     */\n    findOne(id) {\n        this.defineInterfaceMethod();\n    }\n}\n","import LocatorInterface from './LocatorInterface';\n\n/**\n * Abstract Locator with common methods.\n */\nexport default class LocatorAbstract extends LocatorInterface {\n    /**\n     * @inheritdoc\n     */\n    getIdPropName() {\n        return 'id';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getModelId(model) {\n        if (typeof model !== 'object' || !model.hasOwnProperty(this.getIdPropName())) {\n            new Error('Model has no property ' + this.getIdPropName());\n        }\n\n        return model[this.getIdPropName()];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isEmptyModelId(model) {\n        const id = this.getModelId(model);\n\n        return id === null || typeof id === 'undefined' || (typeof id === 'string' && id.length === 0);\n    }\n}\n","import ModelManagerInterface from './ModelManagerInterface';\n\n/**\n * Data persistence by HTTP protocol.\n */\nexport default class HTTPModelManager extends ModelManagerInterface {\n    /**\n     * @param {HTTPLocatorAbstract} locator\n     * @param {AxiosInstance} httpClient\n     */\n    constructor(locator, httpClient) {\n        super();\n        this._locator = locator;\n        this._client = httpClient;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get(id, modelClass, options = {}) {\n        return new Promise((resolve, reject) => {\n            this._client.get(this._locator.locateById(id), this._getRequestOptions())\n                .then((response) => {\n                    resolve(new modelClass(response.data));\n                }).catch((e) => () => {\n                    reject(e);\n                });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(model, options = {}) {\n        return new Promise((resolve, reject) => {\n            let request;\n            const requestOptions = this._getRequestOptions({\n                data: {\n                    // TODO get data from model\n                }\n            });\n\n            if (this._locator.isEmptyModelId(model)) {\n                request = this._client.post(this._locator.locate(model), requestOptions);\n            } else {\n                request = this._client.put(this._locator.locate(model), requestOptions);\n            }\n\n            request.then(() => {\n                resolve(true);\n            }).catch((e) => () => {\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    remove(model, options = {}) {\n        return new Promise((resolve, reject) => {\n            this._client.delete(this._locator.locate(model), this._getRequestOptions()).then(() => {\n                resolve(true);\n            }).catch((e) => () => {\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Common request options.\n     * This method is for overwriting.\n     *\n     * @protected\n     */\n    _getRequestOptions(additional = {}) {\n        return additional;\n    }\n}\n","import RepositoryInterface from './RepositoryInterface';\n\n/**\n * Data collection from HTTP protocol.\n */\nexport default class HTTPRepository extends RepositoryInterface {\n    /**\n     * @param {Model.prototype} modelClass\n     * @param {HTTPLocatorAbstract} locator\n     * @param {HTTPModelManager} manager\n     * @param {AxiosInstance} httpClient\n     */\n    constructor(modelClass, locator, manager, httpClient) {\n        super();\n        /** @protected */\n        this._modelClass = modelClass;\n        /** @protected */\n        this._locator = locator;\n        /** @protected */\n        this._manager = manager;\n        /** @protected */\n        this._client = httpClient;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    findOne(id) {\n        return this._manager.get(id, this._modelClass);\n    }\n}\n","import LocatorAbstract from './LocatorAbstract';\nimport HTTPModelManager from '../model-manager/HTTPModelManager';\nimport HTTPRepository from '../repository/HTTPRepository';\n\n/**\n * Locator which locates data by HTTP protocol.\n */\nexport default class HTTPLocatorAbstract extends LocatorAbstract {\n    /**\n     * Host path like https://google.com. It's optionally.\n     *\n     * @return {string|null}\n     */\n    get hostPath() {\n        return null;\n    }\n\n    /**\n     * Base path in URL.\n     *\n     * @return {string}\n     */\n    get basePath() {\n        throw new Error('basePath should be defined in HTTPLocator');\n    }\n\n    /**\n     * Additional headers e.g. api key.\n     *\n     * @return {Object}\n     */\n    get headers() {\n        return {};\n    }\n\n    /**\n     * Get base URL.\n     *\n     * @return {string}\n     */\n    getBaseURL() {\n        return `${this.hostPath}${this.basePath}`;\n    }\n\n    /**\n     * Get custom URL.\n     *\n     * @param {string} path\n     * @return {string}\n     */\n    getUrl(path) {\n        return `${this.getBaseURL()}${path}`;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    locate(model, options = {}) {\n        return this.isEmptyModelId(model)\n            ? this.getBaseURL()\n            : this.locateById(this.getModelId(model), options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    locateById(id, options = {}) {\n        return this.getUrl(`/${id}`);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getModelManagerClass() {\n        return HTTPModelManager;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getRepositoryClass() {\n        return HTTPRepository;\n    }\n}\n","import axios from 'axios';\n\n/**\n * @param {HTTPLocatorAbstract} locator\n * @return {AxiosInstance}\n */\nconst createClient = (locator) => {\n    return axios.create({\n        baseURL: locator.getBaseURL(),\n        headers: locator.headers\n    });\n};\n\nexport default createClient;\n","import HTTPModelManager from '../model-manager/HTTPModelManager';\nimport HTTPRepository from '../repository/HTTPRepository';\nimport createClient from '../http/createClient';\n\nexport default class HTTPFactory {\n    /**\n     * Create ModelManager object.\n     *\n     * @param {HTTPLocatorAbstract} locator\n     * @return {HTTPModelManager}\n     */\n    createManager(locator) {\n        return new HTTPModelManager(locator, createClient(locator));\n    }\n\n    /**\n     * Create Repository object.\n     *\n     * @param {Model.prototype} modelClass\n     * @param {HTTPLocatorAbstract} locator\n     * @return {HTTPRepository}\n     */\n    createRepository(modelClass, locator) {\n        const manager = this.createManager(locator);\n\n        return new HTTPRepository(modelClass, locator, manager, createClient(locator));\n    }\n}\n","import Factory from './HTTPFactory';\n\nconst factory = new Factory();\n\nexport default factory;\n","import Model from 'objectmodel'; // http://objectmodel.js.org/docs/v2/\nimport LocatorInterface from './locator/LocatorInterface';\nimport ModelManagerInterface from './model-manager/ModelManagerInterface';\nimport RepositoryInterface from './repository/RepositoryInterface';\nimport HTTPLocatorAbstract from './locator/HTTPLocatorAbstract';\nimport HTTPModelManager from './model-manager/HTTPModelManager';\nimport HTTPRepository from './repository/HTTPRepository';\nimport httpFactory from './factory/http';\nimport createHTTPClient from './http/createClient';\n\nexport default {\n    Model,\n    LocatorInterface,\n    ModelManagerInterface,\n    RepositoryInterface,\n    HTTPLocatorAbstract,\n    HTTPModelManager,\n    HTTPRepository,\n    httpFactory,\n    http: {\n        createClient: createHTTPClient\n    }\n};\n"],"names":["Interface","Error","LocatorInterface","model","defineInterfaceMethod","id","ModelManagerInterface","modelClass","RepositoryInterface","LocatorAbstract","hasOwnProperty","getIdPropName","getModelId","length","HTTPModelManager","locator","httpClient","_locator","_client","Promise","resolve","reject","get","locateById","_getRequestOptions","then","response","data","catch","e","request","requestOptions","isEmptyModelId","post","locate","put","delete","additional","HTTPRepository","manager","_modelClass","_manager","HTTPLocatorAbstract","hostPath","basePath","path","getBaseURL","options","getUrl","createClient","axios","create","headers","HTTPFactory","createManager","factory","Factory","createHTTPClient"],"mappings":"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"}