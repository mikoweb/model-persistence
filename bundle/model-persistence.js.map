{"version":3,"file":"model-persistence.js","sources":["../src/core/Interface.js","../src/locator/LocatorInterface.js","../src/model-manager/ModelManagerInterface.js","../src/repository/RepositoryInterface.js","../src/transformer/TransformerInterface.js","../src/transformer/InputTransformer.js","../src/transformer/OutputTransformer.js","../src/locator/LocatorAbstract.js","../src/model-manager/HTTPModelManager.js","../src/repository/HTTPRepository.js","../src/locator/HTTPLocatorAbstract.js","../src/http/clientConfig.js","../src/http/createClient.js","../src/factory/HTTPFactory.js","../src/factory/http.js","../src/index.js"],"sourcesContent":["export default class Interface {\n    defineInterfaceMethod() {\n        throw new Error('Class should implement this method');\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Data locator.\n */\nexport default class LocatorInterface extends Interface {\n    /**\n     * Locate place where model is storage.\n     *\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {string}\n     */\n    locate(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Locate place by id.\n     *\n     * @param id\n     * @param {Object} [options]\n     * @return {string}\n     */\n    locateById(id, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Name of id property.\n     *\n     * @return {string}\n     */\n    getIdPropName() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Get id from model.\n     *\n     * @param {Model} model\n     * @return {*}\n     */\n    getModelId(model) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Is empty model id?\n     *\n     * @param {Model} model\n     * @return {boolean}\n     */\n    isEmptyModelId(model) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * ModelManagerClass related to this locator.\n     *\n     * @return {ModelManagerInterface.prototype}\n     */\n    getModelManagerClass() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * RepositoryClass related to this locator.\n     *\n     * @return {RepositoryInterface.prototype}\n     */\n    getRepositoryClass() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Input Transformer class related to this locator.\n     *\n     * @return {TransformerInterface.prototype}\n     */\n    getInputTransformerClass() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Input Transformer class related to this locator.\n     *\n     * @return {TransformerInterface.prototype}\n     */\n    getOutputTransformerClass() {\n        this.defineInterfaceMethod();\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Data persistence layer.\n */\nexport default class ModelManagerInterface extends Interface {\n    /**\n     * Get model by id from storage.\n     *\n     * @async\n     * @param id\n     * @param {Model.prototype} modelClass\n     * @param {Object} [options]\n     * @return {Promise.<Model>}\n     */\n    get(id, modelClass, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Save model to storage.\n     *\n     * @async\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {Promise.<Boolean>}\n     */\n    save(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Remove model from storage.\n     *\n     * @async\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {Promise.<Boolean>}\n     */\n    remove(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Repository pattern - data collection.\n */\nexport default class RepositoryInterface extends Interface {\n    /**\n     * Find one model by id from storage.\n     *\n     * @async\n     * @param id\n     * @return {Promise.<Model>}\n     */\n    findOne(id) {\n        this.defineInterfaceMethod();\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Data Transformer.\n */\nexport default class TransformerInterface extends Interface {\n    /**\n     * Transform data.\n     *\n     * @async\n     * @param {Object} object\n     * @return {Object}\n     */\n    transform(object) {\n        this.defineInterfaceMethod();\n    }\n}\n","import TransformerInterface from './TransformerInterface';\n\n/**\n * Default input transformer.\n * Used as \"middleware\" between data source (e.g. HTTP Response) and Model constructor.\n */\nexport default class InputTransformer extends TransformerInterface {\n    /**\n     * By default, nothing changes.\n     *\n     * @inheritdoc\n     */\n    transform(object) {\n        return object;\n    }\n}\n","import TransformerInterface from './TransformerInterface';\n\n/**\n * Default output transformer.\n * Used as \"middleware\" between Model and data storage (e.g. HTTP Request).\n */\nexport default class OutputTransformer extends TransformerInterface {\n    /**\n     * By default, nothing changes.\n     *\n     * @inheritdoc\n     */\n    transform(object) {\n        // TODO only properties from model schema (if object is Model)\n        return object;\n    }\n}\n","import LocatorInterface from './LocatorInterface';\nimport InputTransformer from '../transformer/InputTransformer';\nimport OutputTransformer from '../transformer/OutputTransformer';\n\n/**\n * Abstract Locator with common methods.\n */\nexport default class LocatorAbstract extends LocatorInterface {\n    /**\n     * @inheritdoc\n     */\n    getIdPropName() {\n        return 'id';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getModelId(model) {\n        if (typeof model !== 'object' || !model.hasOwnProperty(this.getIdPropName())) {\n            new Error('Model has no property ' + this.getIdPropName());\n        }\n\n        return model[this.getIdPropName()];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isEmptyModelId(model) {\n        const id = this.getModelId(model);\n\n        return id === null || typeof id === 'undefined' || (typeof id === 'string' && id.length === 0);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getInputTransformerClass() {\n        return InputTransformer;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getOutputTransformerClass() {\n        return OutputTransformer;\n    }\n}\n","import ModelManagerInterface from './ModelManagerInterface';\n\n/**\n * Data persistence by HTTP protocol.\n */\nexport default class HTTPModelManager extends ModelManagerInterface {\n    /**\n     * @param {HTTPLocatorAbstract} locator\n     * @param {AxiosInstance} httpClient\n     */\n    constructor(locator, httpClient) {\n        super();\n        this._locator = locator;\n        this._client = httpClient;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get(id, modelClass, options = {}) {\n        return new Promise((resolve, reject) => {\n            this._client.get(this._locator.locateById(id), this._getRequestOptions())\n                .then((response) => {\n                    resolve(new modelClass(this.createInputTransformer().transform(response.data)));\n                }).catch((e) => () => {\n                    reject(e);\n                });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(model, options = {}) {\n        return new Promise((resolve, reject) => {\n            let request;\n            const requestOptions = this._getRequestOptions({\n                data: this.createOutputTransformer().transform(model)\n            });\n\n            if (this._locator.isEmptyModelId(model)) {\n                request = this._client.post(this._locator.locate(model), requestOptions);\n            } else {\n                request = this._client.put(this._locator.locate(model), requestOptions);\n            }\n\n            request.then(() => {\n                resolve(true);\n            }).catch((e) => () => {\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    remove(model, options = {}) {\n        return new Promise((resolve, reject) => {\n            this._client.delete(this._locator.locate(model), this._getRequestOptions()).then(() => {\n                resolve(true);\n            }).catch((e) => () => {\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Create input transformer object.\n     *\n     * @return {TransformerInterface}\n     */\n    createInputTransformer() {\n        const Transformer = this._locator.getInputTransformerClass();\n\n        return new Transformer();\n    }\n\n    /**\n     * Create output transformer object.\n     *\n     * @return {TransformerInterface}\n     */\n    createOutputTransformer() {\n        const Transformer = this._locator.getOutputTransformerClass();\n\n        return new Transformer();\n    }\n\n    /**\n     * Common request options.\n     * This method is for overwriting.\n     *\n     * @protected\n     */\n    _getRequestOptions(additional = {}) {\n        return additional;\n    }\n}\n","import RepositoryInterface from './RepositoryInterface';\n\n/**\n * Data collection from HTTP protocol.\n */\nexport default class HTTPRepository extends RepositoryInterface {\n    /**\n     * @param {Model.prototype} modelClass\n     * @param {HTTPLocatorAbstract} locator\n     * @param {HTTPModelManager} manager\n     * @param {AxiosInstance} httpClient\n     */\n    constructor(modelClass, locator, manager, httpClient) {\n        super();\n        /** @protected */\n        this._modelClass = modelClass;\n        /** @protected */\n        this._locator = locator;\n        /** @protected */\n        this._manager = manager;\n        /** @protected */\n        this._client = httpClient;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    findOne(id) {\n        return this._manager.get(id, this._modelClass);\n    }\n}\n","import LocatorAbstract from './LocatorAbstract';\nimport HTTPModelManager from '../model-manager/HTTPModelManager';\nimport HTTPRepository from '../repository/HTTPRepository';\n\n/**\n * Locator which locates data by HTTP protocol.\n */\nexport default class HTTPLocatorAbstract extends LocatorAbstract {\n    /**\n     * Host path like https://google.com. It's optionally.\n     *\n     * @return {string|null}\n     */\n    get hostPath() {\n        return null;\n    }\n\n    /**\n     * Base path in URL.\n     *\n     * @return {string}\n     */\n    get basePath() {\n        throw new Error('basePath should be defined in HTTPLocator');\n    }\n\n    /**\n     * Additional headers e.g. api key.\n     *\n     * @return {Object}\n     */\n    get headers() {\n        return {};\n    }\n\n    /**\n     * Get base URL.\n     *\n     * @return {string}\n     */\n    getBaseURL() {\n        return `${this.hostPath}${this.basePath}`;\n    }\n\n    /**\n     * Get custom URL.\n     *\n     * @param {string} path\n     * @return {string}\n     */\n    getUrl(path) {\n        return `${this.getBaseURL()}${path}`;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    locate(model, options = {}) {\n        return this.isEmptyModelId(model)\n            ? this.getBaseURL()\n            : this.locateById(this.getModelId(model), options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    locateById(id, options = {}) {\n        return this.getUrl(`/${id}`);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @return {HTTPModelManager.prototype}\n     */\n    getModelManagerClass() {\n        return HTTPModelManager;\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @return {HTTPRepository.prototype}\n     */\n    getRepositoryClass() {\n        return HTTPRepository;\n    }\n}\n","class ClientConfig {\n    constructor() {\n        this.options = {};\n    }\n\n    /**\n     * @return {Object}\n     */\n    get options() {\n        return Object.assign({}, this._options);\n    }\n\n    /**\n     * @param {Object} options\n     */\n    set options(options) {\n        this._options = Object.assign({}, options);\n    }\n}\n\nconst options = new ClientConfig();\n\nexport default options;\n","import axios from 'axios';\nimport config from './clientConfig';\n\n/**\n * @param {HTTPLocatorAbstract} locator\n * @return {AxiosInstance}\n */\nconst createClient = (locator) => {\n    return axios.create(Object.assign({}, config.options, {\n        baseURL: locator.getBaseURL(),\n        headers: locator.headers\n    }));\n};\n\nexport default createClient;\n","import createClient from '../http/createClient';\n\nexport default class HTTPFactory {\n    /**\n     * Create ModelManager object.\n     *\n     * @param {HTTPLocatorAbstract} locator\n     * @return {HTTPModelManager}\n     */\n    createManager(locator) {\n        const Manager = locator.getModelManagerClass();\n\n        return new Manager(locator, createClient(locator));\n    }\n\n    /**\n     * Create Repository object.\n     *\n     * @param {Model.prototype} modelClass\n     * @param {HTTPLocatorAbstract} locator\n     * @return {HTTPRepository}\n     */\n    createRepository(modelClass, locator) {\n        const Repository = locator.getRepositoryClass();\n        const manager = this.createManager(locator);\n\n        return new Repository(modelClass, locator, manager, createClient(locator));\n    }\n}\n","import Factory from './HTTPFactory';\n\nconst factory = new Factory();\n\nexport default factory;\n","import Model from 'objectmodel'; // http://objectmodel.js.org/docs/v2/\nimport LocatorInterface from './locator/LocatorInterface';\nimport ModelManagerInterface from './model-manager/ModelManagerInterface';\nimport RepositoryInterface from './repository/RepositoryInterface';\nimport HTTPLocatorAbstract from './locator/HTTPLocatorAbstract';\nimport HTTPModelManager from './model-manager/HTTPModelManager';\nimport HTTPRepository from './repository/HTTPRepository';\nimport httpFactory from './factory/http';\nimport createHTTPClient from './http/createClient';\nimport httpClientConfig from './http/clientConfig';\nimport TransformerInterface from './transformer/TransformerInterface';\nimport InputTransformer from './transformer/InputTransformer';\nimport OutputTransformer from './transformer/OutputTransformer';\n\nexport default {\n    Model,\n    LocatorInterface,\n    ModelManagerInterface,\n    RepositoryInterface,\n    HTTPLocatorAbstract,\n    HTTPModelManager,\n    HTTPRepository,\n    httpFactory,\n    http: {\n        createClient: createHTTPClient,\n        config: httpClientConfig\n    },\n    transformer: {\n        TransformerInterface,\n        InputTransformer,\n        OutputTransformer\n    }\n};\n"],"names":["Interface","Error","LocatorInterface","model","defineInterfaceMethod","id","ModelManagerInterface","modelClass","RepositoryInterface","TransformerInterface","object","InputTransformer","OutputTransformer","LocatorAbstract","hasOwnProperty","getIdPropName","getModelId","length","HTTPModelManager","locator","httpClient","_locator","_client","Promise","resolve","reject","get","locateById","_getRequestOptions","then","response","createInputTransformer","transform","data","catch","e","request","requestOptions","createOutputTransformer","isEmptyModelId","post","locate","put","delete","Transformer","getInputTransformerClass","getOutputTransformerClass","additional","HTTPRepository","manager","_modelClass","_manager","HTTPLocatorAbstract","hostPath","basePath","path","getBaseURL","options","getUrl","ClientConfig","Object","assign","_options","createClient","axios","create","config","headers","HTTPFactory","Manager","getModelManagerClass","Repository","getRepositoryClass","createManager","factory","Factory","createHTTPClient","httpClientConfig"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAqBA;;;;;;;gDACO;kBACd,IAAIC,KAAJ,CAAU,oCAAV,CAAN;;;;;;ACAR;;;;IAGqBC;;;;;;;;;;;;;;;;;;2BAQVC,OAAqB;WACnBC,qBAAL;;;;;;;;;;;;;+BAUOC,IAAkB;WACpBD,qBAAL;;;;;;;;;;;oCAQY;WACPA,qBAAL;;;;;;;;;;;;+BASOD,OAAO;WACTC,qBAAL;;;;;;;;;;;;mCASWD,OAAO;WACbC,qBAAL;;;;;;;;;;;2CAQmB;WACdA,qBAAL;;;;;;;;;;;yCAQiB;WACZA,qBAAL;;;;;;;;;;;+CAQuB;WAClBA,qBAAL;;;;;;;;;;;gDAQwB;WACnBA,qBAAL;;;;EArFsCJ;;ACH9C;;;;IAGqBM;;;;;;;;;;;;;;;;;;;;2BAUbD,IAAIE,YAA0B;WACzBH,qBAAL;;;;;;;;;;;;;;yBAWCD,OAAqB;WACjBC,qBAAL;;;;;;;;;;;;;;2BAWGD,OAAqB;WACnBC,qBAAL;;;;EAnC2CJ;;ACHnD;;;;IAGqBQ;;;;;;;;;;;;;;;;;;4BAQTH,IAAI;WACHD,qBAAL;;;;EATyCJ;;ACHjD;;;;IAGqBS;;;;;;;;;;;;;;;;;;8BAQPC,QAAQ;WACTN,qBAAL;;;;EAT0CJ;;ACHlD;;;;;IAIqBW;;;;;;;;;;;;;;;;8BAMPD,QAAQ;aACPA,MAAP;;;;EAPsCD;;ACJ9C;;;;;IAIqBG;;;;;;;;;;;;;;;;8BAMPF,QAAQ;;aAEPA,MAAP;;;;EARuCD;;ACF/C;;;;IAGqBI;;;;;;;;;;;;;;wCAID;mBACL,IAAP;;;;;;;;;mCAMOV,OAAO;gBACV,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAAjB,IAA6B,CAACA,MAAMW,cAAN,CAAqB,KAAKC,aAAL,EAArB,CAAlC,EAA8E;oBACtEd,KAAJ,CAAU,2BAA2B,KAAKc,aAAL,EAArC;;;mBAGGZ,MAAM,KAAKY,aAAL,EAAN,CAAP;;;;;;;;;uCAMWZ,OAAO;gBACZE,KAAK,KAAKW,UAAL,CAAgBb,KAAhB,CAAX;;mBAEOE,OAAO,IAAP,IAAe,OAAOA,EAAP,KAAc,WAA7B,IAA6C,OAAOA,EAAP,KAAc,QAAd,IAA0BA,GAAGY,MAAH,KAAc,CAA5F;;;;;;;;;mDAMuB;mBAChBN,gBAAP;;;;;;;;;oDAMwB;mBACjBC,iBAAP;;;;EAvCqCV;;ACL7C;;;;IAGqBgB;;;;;;;8BAKLC,OAAZ,EAAqBC,UAArB,EAAiC;;;;;cAExBC,QAAL,GAAgBF,OAAhB;cACKG,OAAL,GAAeF,UAAf;;;;;;;;;;;+BAMAf,IAAIE,YAA0B;;;mBACvB,IAAIgB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;uBAC/BH,OAAL,CAAaI,GAAb,CAAiB,OAAKL,QAAL,CAAcM,UAAd,CAAyBtB,EAAzB,CAAjB,EAA+C,OAAKuB,kBAAL,EAA/C,EACKC,IADL,CACU,UAACC,QAAD,EAAc;4BACR,IAAIvB,UAAJ,CAAe,OAAKwB,sBAAL,GAA8BC,SAA9B,CAAwCF,SAASG,IAAjD,CAAf,CAAR;iBAFR,EAGOC,KAHP,CAGa,UAACC,CAAD;2BAAO,YAAM;+BACXA,CAAP;qBADK;iBAHb;aADG,CAAP;;;;;;;;;6BAaChC,OAAqB;;;mBACf,IAAIoB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;oBAChCW,gBAAJ;oBACMC,iBAAiB,OAAKT,kBAAL,CAAwB;0BACrC,OAAKU,uBAAL,GAA+BN,SAA/B,CAAyC7B,KAAzC;iBADa,CAAvB;;oBAII,OAAKkB,QAAL,CAAckB,cAAd,CAA6BpC,KAA7B,CAAJ,EAAyC;8BAC3B,OAAKmB,OAAL,CAAakB,IAAb,CAAkB,OAAKnB,QAAL,CAAcoB,MAAd,CAAqBtC,KAArB,CAAlB,EAA+CkC,cAA/C,CAAV;iBADJ,MAEO;8BACO,OAAKf,OAAL,CAAaoB,GAAb,CAAiB,OAAKrB,QAAL,CAAcoB,MAAd,CAAqBtC,KAArB,CAAjB,EAA8CkC,cAA9C,CAAV;;;wBAGIR,IAAR,CAAa,YAAM;4BACP,IAAR;iBADJ,EAEGK,KAFH,CAES,UAACC,CAAD;2BAAO,YAAM;+BACXA,CAAP;qBADK;iBAFT;aAZG,CAAP;;;;;;;;;+BAuBGhC,OAAqB;;;mBACjB,IAAIoB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;uBAC/BH,OAAL,CAAaqB,MAAb,CAAoB,OAAKtB,QAAL,CAAcoB,MAAd,CAAqBtC,KAArB,CAApB,EAAiD,OAAKyB,kBAAL,EAAjD,EAA4EC,IAA5E,CAAiF,YAAM;4BAC3E,IAAR;iBADJ,EAEGK,KAFH,CAES,UAACC,CAAD;2BAAO,YAAM;+BACXA,CAAP;qBADK;iBAFT;aADG,CAAP;;;;;;;;;;;iDAcqB;gBACfS,cAAc,KAAKvB,QAAL,CAAcwB,wBAAd,EAApB;;mBAEO,IAAID,WAAJ,EAAP;;;;;;;;;;;kDAQsB;gBAChBA,cAAc,KAAKvB,QAAL,CAAcyB,yBAAd,EAApB;;mBAEO,IAAIF,WAAJ,EAAP;;;;;;;;;;;;6CASgC;gBAAjBG,UAAiB,uEAAJ,EAAI;;mBACzBA,UAAP;;;;EA3FsCzC;;ACH9C;;;;IAGqB0C;;;;;;;;;4BAOLzC,UAAZ,EAAwBY,OAAxB,EAAiC8B,OAAjC,EAA0C7B,UAA1C,EAAsD;;;;;;cAG7C8B,WAAL,GAAmB3C,UAAnB;;cAEKc,QAAL,GAAgBF,OAAhB;;cAEKgC,QAAL,GAAgBF,OAAhB;;cAEK3B,OAAL,GAAeF,UAAf;;;;;;;;;;;gCAMIf,IAAI;mBACD,KAAK8C,QAAL,CAAczB,GAAd,CAAkBrB,EAAlB,EAAsB,KAAK6C,WAA3B,CAAP;;;;EAvBoC1C;;ACD5C;;;;IAGqB4C;;;;;;;;;;;;;;;;;iCAiCJ;kBACC,KAAKC,QAAf,GAA0B,KAAKC,QAA/B;;;;;;;;;;;;2BASGC,MAAM;kBACC,KAAKC,UAAL,EAAV,GAA8BD,IAA9B;;;;;;;;;2BAMGpD,OAAqB;UAAdsD,OAAc,uEAAJ,EAAI;;aACjB,KAAKlB,cAAL,CAAoBpC,KAApB,IACD,KAAKqD,UAAL,EADC,GAED,KAAK7B,UAAL,CAAgB,KAAKX,UAAL,CAAgBb,KAAhB,CAAhB,EAAwCsD,OAAxC,CAFN;;;;;;;;;+BAQOpD,IAAkB;aAClB,KAAKqD,MAAL,OAAgBrD,EAAhB,CAAP;;;;;;;;;;;2CAQmB;aACZa,gBAAP;;;;;;;;;;;yCAQiB;aACV8B,cAAP;;;;;;;;;;2BAxEW;aACJ,IAAP;;;;;;;;;;;2BAQW;YACL,IAAI/C,KAAJ,CAAU,2CAAV,CAAN;;;;;;;;;;;2BAQU;aACH,EAAP;;;;EAzByCY;;ICP3C8C;4BACY;;;aACLF,OAAL,GAAe,EAAf;;;;;;;;;;+BAMU;mBACHG,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKC,QAAvB,CAAP;;;;;;;6BAMQL,SAAS;iBACZK,QAAL,GAAgBF,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,CAAhB;;;;;;AAIR,IAAMA,UAAU,IAAIE,YAAJ,EAAhB;;ACjBA;;;;AAIA,IAAMI,eAAe,SAAfA,YAAe,CAAC5C,OAAD,EAAa;WACvB6C,MAAMC,MAAN,CAAaL,OAAOC,MAAP,CAAc,EAAd,EAAkBK,QAAOT,OAAzB,EAAkC;iBACzCtC,QAAQqC,UAAR,EADyC;iBAEzCrC,QAAQgD;KAFD,CAAb,CAAP;CADJ;;ICLqBC;;;;;;;;;;;;;;sCAOHjD,SAAS;gBACbkD,UAAUlD,QAAQmD,oBAAR,EAAhB;;mBAEO,IAAID,OAAJ,CAAYlD,OAAZ,EAAqB4C,aAAa5C,OAAb,CAArB,CAAP;;;;;;;;;;;;;yCAUaZ,YAAYY,SAAS;gBAC5BoD,aAAapD,QAAQqD,kBAAR,EAAnB;gBACMvB,UAAU,KAAKwB,aAAL,CAAmBtD,OAAnB,CAAhB;;mBAEO,IAAIoD,UAAJ,CAAehE,UAAf,EAA2BY,OAA3B,EAAoC8B,OAApC,EAA6Cc,aAAa5C,OAAb,CAA7C,CAAP;;;;;;ACxBR,IAAMuD,UAAU,IAAIC,WAAJ,EAAhB;;ACYA,YAAe;gBAAA;sCAAA;gDAAA;4CAAA;4CAAA;sCAAA;kCAAA;wBAAA;UASL;sBACYC,YADZ;gBAEMC;KAXD;iBAaE;kDAAA;0CAAA;;;CAbjB;;;;;;;;"}