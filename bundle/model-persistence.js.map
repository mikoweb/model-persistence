{"version":3,"file":"model-persistence.js","sources":["../src/model/DynamicModel.js","../src/core/Interface.js","../src/locator/LocatorInterface.js","../src/model-manager/ModelManagerInterface.js","../src/repository/RepositoryInterface.js","../src/transformer/TransformerInterface.js","../src/transformer/InputTransformer.js","../src/model/modelHelpers.js","../src/transformer/OutputTransformer.js","../src/locator/LocatorAbstract.js","../src/model-manager/HTTPModelManager.js","../src/repository/HTTPRepository.js","../src/locator/HTTPLocatorAbstract.js","../src/http/clientConfig.js","../src/http/createClient.js","../src/factory/HTTPFactory.js","../src/factory/http.js","../src/transformer/CustomTransformer.js","../src/transformer/mergeTransformers.js","../src/index.js"],"sourcesContent":["/**\n * It's shit model type like object literal. No schema, no strong typing, no validation, no nothing.\n */\nexport default class DynamicModel {\n    /**\n     * @param {Object} object\n     */\n    constructor(object) {\n        if (object === null || typeof object !== 'object') {\n            throw new TypeError('expecting object literal');\n        }\n\n        for (const prop in object) {\n            if (object.hasOwnProperty(prop)) {\n                this[prop] = object[prop];\n            }\n        }\n    }\n\n    /**\n     * @return {string}\n     */\n    toJSON() {\n        return JSON.stringify(this);\n    }\n}\n","export default class Interface {\n    defineInterfaceMethod() {\n        throw new Error('Class should implement this method');\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Data locator.\n */\nexport default class LocatorInterface extends Interface {\n    /**\n     * Locate place where model is storage.\n     *\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {string}\n     */\n    locate(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Locate place by id.\n     *\n     * @param id\n     * @param {Object} [options]\n     * @return {string}\n     */\n    locateById(id, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Name of id property.\n     *\n     * @return {string}\n     */\n    getIdPropName() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Get id from model.\n     *\n     * @param {Model} model\n     * @return {*}\n     */\n    getModelId(model) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Is empty model id?\n     *\n     * @param {Model} model\n     * @return {boolean}\n     */\n    isEmptyModelId(model) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * ModelManagerClass related to this locator.\n     *\n     * @return {ModelManagerInterface.prototype}\n     */\n    getModelManagerClass() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * RepositoryClass related to this locator.\n     *\n     * @return {RepositoryInterface.prototype}\n     */\n    getRepositoryClass() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Input Transformer class related to this locator.\n     *\n     * @return {TransformerInterface.prototype}\n     */\n    getInputTransformerClass() {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Input Transformer class related to this locator.\n     *\n     * @return {TransformerInterface.prototype}\n     */\n    getOutputTransformerClass() {\n        this.defineInterfaceMethod();\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Data persistence layer.\n */\nexport default class ModelManagerInterface extends Interface {\n    /**\n     * Get model by id from storage.\n     *\n     * @async\n     * @param id\n     * @param {Model.prototype} modelClass\n     * @param {Object} [options]\n     * @return {Promise.<Model>}\n     */\n    get(id, modelClass, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Save model to storage.\n     *\n     * @async\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {Promise.<Boolean>}\n     */\n    save(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n\n    /**\n     * Remove model from storage.\n     *\n     * @async\n     * @param {Model} model\n     * @param {Object} [options]\n     * @return {Promise.<Boolean>}\n     */\n    remove(model, options = {}) {\n        this.defineInterfaceMethod();\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Repository pattern - data collection.\n */\nexport default class RepositoryInterface extends Interface {\n    /**\n     * Find one model by id from storage.\n     *\n     * @async\n     * @param id\n     * @return {Promise.<Model>}\n     */\n    findOne(id) {\n        this.defineInterfaceMethod();\n    }\n}\n","import Interface from '../core/Interface';\n\n/**\n * Data Transformer.\n */\nexport default class TransformerInterface extends Interface {\n    /**\n     * Transform data.\n     *\n     * @async\n     * @param {Object} object\n     * @return {Object}\n     */\n    transform(object) {\n        this.defineInterfaceMethod();\n    }\n}\n","import TransformerInterface from './TransformerInterface';\n\n/**\n * Default input transformer.\n * Used as \"middleware\" between data source (e.g. HTTP Response) and Model constructor.\n */\nexport default class InputTransformer extends TransformerInterface {\n    /**\n     * By default, nothing changes.\n     *\n     * @inheritdoc\n     */\n    transform(object) {\n        return object;\n    }\n}\n","import Model from 'objectmodel';\n\nclass ModelHelpers {\n    /**\n     * Get raw object data from model.\n     *\n     * @param {Model} model\n     * @param {boolean} isRaw\n     * @return {Object}\n     */\n    getData(model, isRaw = false) {\n        if (!isRaw && !this.isModel(model)) {\n            throw new TypeError(`expecting model to be Model, got ${typeof model}`);\n        }\n\n        const data = {};\n\n        if (this.isModel(model)) {\n            // This work's with ObjectModel 2.x version.\n            // For 3.x major must be changed to Object.keys()\n            for (const prop in model) {\n                if (model.hasOwnProperty(prop)) {\n                    const descriptor = Object.getOwnPropertyDescriptor(model, prop);\n\n                    if (typeof descriptor.get === 'function' && typeof model[prop] !== 'undefined') {\n                        data[prop] = this._getObjectValue(model, prop);\n                    }\n                }\n            }\n        } else if (this.isRawObject(model)) {\n            for (const prop in model) {\n                if (model.hasOwnProperty(prop)) {\n                    data[prop] = this._getObjectValue(model, prop);\n                }\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * Is model?\n     *\n     * @param {Object} object\n     */\n    isModel(object) {\n        return object !== null && typeof object === 'object' && (object instanceof Model ||\n            (typeof object.constructor === 'function' && object.constructor instanceof Model));\n    }\n\n    /**\n     * Is raw model?\n     *\n     * @param {Object} object\n     */\n    isRawObject(object) {\n        return object !== null && typeof object === 'object' && object.constructor === Object\n    }\n\n    /**\n     * @param {Model|Object} model\n     * @param {string} prop\n     * @return {*}\n     * @private\n     */\n    _getObjectValue(model, prop) {\n        const value = model[prop];\n\n        return this.isRawObject(value) || this.isModel(value) ? this.getData(value, true) : value;\n    }\n}\n\nconst helpers = new ModelHelpers();\n\nexport default helpers;\n","import TransformerInterface from './TransformerInterface';\nimport modelHelpers from '../model/modelHelpers';\nimport DynamicModel from '../model/DynamicModel';\n\n/**\n * Default output transformer.\n * Used as \"middleware\" between Model and data storage (e.g. HTTP Request).\n */\nexport default class OutputTransformer extends TransformerInterface {\n    /**\n     * Only properties from model schema.\n     *\n     * @inheritdoc\n     */\n    transform(object) {\n        let data = {};\n\n        if (modelHelpers.isModel(object)) {\n            data = modelHelpers.getData(object);\n        } else if (object instanceof DynamicModel || modelHelpers.isRawObject(object)) {\n            data = object;\n        }\n\n        return data;\n    }\n}\n","import LocatorInterface from './LocatorInterface';\nimport InputTransformer from '../transformer/InputTransformer';\nimport OutputTransformer from '../transformer/OutputTransformer';\n\n/**\n * Abstract Locator with common methods.\n */\nexport default class LocatorAbstract extends LocatorInterface {\n    /**\n     * @inheritdoc\n     */\n    getIdPropName() {\n        return 'id';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getModelId(model) {\n        if (model === null || typeof model !== 'object') {\n            throw new Error('argument is not Object');\n        }\n\n        return model[this.getIdPropName()];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    isEmptyModelId(model) {\n        const id = this.getModelId(model);\n\n        return id === null || typeof id === 'undefined' || (typeof id === 'string' && id.length === 0);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getInputTransformerClass() {\n        return InputTransformer;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getOutputTransformerClass() {\n        return OutputTransformer;\n    }\n}\n","import ModelManagerInterface from './ModelManagerInterface';\n\n/**\n * Data persistence by HTTP protocol.\n */\nexport default class HTTPModelManager extends ModelManagerInterface {\n    /**\n     * @param {HTTPLocatorAbstract} locator\n     * @param {AxiosInstance} httpClient\n     */\n    constructor(locator, httpClient) {\n        super();\n        /** @protected */\n        this._locator = locator;\n        /** @protected */\n        this._client = httpClient;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get(id, modelClass, options = {}) {\n        return new Promise((resolve, reject) => {\n            this._client.get(this._locator.locateById(id), this._getRequestOptions())\n                .then((response) => {\n                    resolve(new modelClass(this.createInputTransformer().transform(response.data)));\n                }).catch((e) => () => {\n                    reject(e);\n                });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(model, options = {}) {\n        return new Promise((resolve, reject) => {\n            let request;\n            const requestOptions = this._getRequestOptions({\n                data: this.createOutputTransformer().transform(model)\n            });\n\n            if (this._locator.isEmptyModelId(model)) {\n                request = this._client.post(this._locator.locate(model), requestOptions);\n            } else {\n                request = this._client.put(this._locator.locate(model), requestOptions);\n            }\n\n            request.then(() => {\n                resolve(true);\n            }).catch((e) => () => {\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    remove(model, options = {}) {\n        return new Promise((resolve, reject) => {\n            this._client.delete(this._locator.locate(model), this._getRequestOptions()).then(() => {\n                resolve(true);\n            }).catch((e) => () => {\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Create input transformer object.\n     *\n     * @return {TransformerInterface}\n     */\n    createInputTransformer() {\n        const Transformer = this._locator.getInputTransformerClass();\n\n        return new Transformer();\n    }\n\n    /**\n     * Create output transformer object.\n     *\n     * @return {TransformerInterface}\n     */\n    createOutputTransformer() {\n        const Transformer = this._locator.getOutputTransformerClass();\n\n        return new Transformer();\n    }\n\n    /**\n     * Common request options.\n     * This method is for overwriting.\n     *\n     * @protected\n     */\n    _getRequestOptions(additional = {}) {\n        return additional;\n    }\n}\n","import RepositoryInterface from './RepositoryInterface';\n\n/**\n * Data collection from HTTP protocol.\n */\nexport default class HTTPRepository extends RepositoryInterface {\n    /**\n     * @param {Model.prototype} modelClass\n     * @param {HTTPLocatorAbstract} locator\n     * @param {HTTPModelManager} manager\n     * @param {AxiosInstance} httpClient\n     */\n    constructor(modelClass, locator, manager, httpClient) {\n        super();\n        /** @protected */\n        this._modelClass = modelClass;\n        /** @protected */\n        this._locator = locator;\n        /** @protected */\n        this._manager = manager;\n        /** @protected */\n        this._client = httpClient;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    findOne(id) {\n        return this._manager.get(id, this._modelClass);\n    }\n}\n","import LocatorAbstract from './LocatorAbstract';\nimport HTTPModelManager from '../model-manager/HTTPModelManager';\nimport HTTPRepository from '../repository/HTTPRepository';\n\n/**\n * Locator which locates data by HTTP protocol.\n */\nexport default class HTTPLocatorAbstract extends LocatorAbstract {\n    /**\n     * Host path like https://google.com. It's optionally.\n     *\n     * @return {string}\n     */\n    get hostPath() {\n        return '';\n    }\n\n    /**\n     * Base path in URL.\n     *\n     * @return {string}\n     */\n    get basePath() {\n        throw new Error('basePath should be defined in HTTPLocator');\n    }\n\n    /**\n     * Additional headers e.g. api key.\n     *\n     * @return {Object}\n     */\n    get headers() {\n        return {};\n    }\n\n    /**\n     * Get base URL.\n     *\n     * @return {string}\n     */\n    getBaseURL() {\n        return `${this.hostPath}${this.basePath}`;\n    }\n\n    /**\n     * Get custom URL.\n     *\n     * @param {string} path\n     * @return {string}\n     */\n    getUrl(path) {\n        return `${this.getBaseURL()}${path}`;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    locate(model, options = {}) {\n        return this.isEmptyModelId(model)\n            ? this.getBaseURL()\n            : this.locateById(this.getModelId(model), options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    locateById(id, options = {}) {\n        return this.getUrl(`/${id}`);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @return {HTTPModelManager.prototype}\n     */\n    getModelManagerClass() {\n        return HTTPModelManager;\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @return {HTTPRepository.prototype}\n     */\n    getRepositoryClass() {\n        return HTTPRepository;\n    }\n}\n","class ClientConfig {\n    constructor() {\n        this.options = {};\n    }\n\n    /**\n     * @return {Object}\n     */\n    get options() {\n        return Object.assign({}, this._options);\n    }\n\n    /**\n     * @param {Object} options\n     */\n    set options(options) {\n        this._options = Object.assign({}, options);\n    }\n}\n\nconst options = new ClientConfig();\n\nexport default options;\n","import axios from 'axios';\nimport config from './clientConfig';\n\n/**\n * @param {HTTPLocatorAbstract} locator\n * @return {AxiosInstance}\n */\nconst createClient = (locator) => {\n    const options = {};\n\n    if (locator !== null && typeof locator === 'object' && Object.keys(locator.headers).length > 0) {\n        options.headers = Object.assign({}, locator.headers);\n    }\n\n    return axios.create(Object.assign({}, config.options, options));\n};\n\nexport default createClient;\n","import createClient from '../http/createClient';\n\nexport default class HTTPFactory {\n    /**\n     * Create ModelManager object.\n     *\n     * @param {HTTPLocatorAbstract} locator\n     * @return {HTTPModelManager}\n     */\n    createManager(locator) {\n        const Manager = locator.getModelManagerClass();\n\n        return new Manager(locator, createClient(locator));\n    }\n\n    /**\n     * Create Repository object.\n     *\n     * @param {Model.prototype} modelClass\n     * @param {HTTPLocatorAbstract} locator\n     * @return {HTTPRepository}\n     */\n    createRepository(modelClass, locator) {\n        const Repository = locator.getRepositoryClass();\n        const manager = this.createManager(locator);\n\n        return new Repository(modelClass, locator, manager, createClient(locator));\n    }\n}\n","import Factory from './HTTPFactory';\n\nconst factory = new Factory();\n\nexport default factory;\n","import TransformerInterface from './TransformerInterface';\n\n/**\n * CustomTransformer for dynamic method definition.\n */\nexport default class CustomTransformer extends TransformerInterface {\n}\n\n// EXAMPLE\n// Code inside Locator class.\n//getOutputTransformerClass() {\n    //return class extends CustomTransformer {\n        //transform(object) {\n            //return {\n                //newPropertyName: object.oldPropertyName,\n                // ...\n            //};\n        //}\n    //};\n//}\n","import TransformerInterface from './TransformerInterface';\n\n/**\n * @param {Array.<TransformerInterface>} transformers\n */\nconst mergeTransformers = (transformers) => {\n    return class extends TransformerInterface {\n        /**\n         * @inheritdoc\n         */\n        transform(object) {\n            let data = object;\n\n            transformers.forEach((transformer) => {\n                data = transformer.transform(data);\n            });\n\n            return data;\n        }\n    };\n};\n\nexport default mergeTransformers;\n","import Model from 'objectmodel'; // http://objectmodel.js.org/docs/v2/\nimport DynamicModel from './model/DynamicModel';\nimport LocatorInterface from './locator/LocatorInterface';\nimport ModelManagerInterface from './model-manager/ModelManagerInterface';\nimport RepositoryInterface from './repository/RepositoryInterface';\nimport HTTPLocatorAbstract from './locator/HTTPLocatorAbstract';\nimport HTTPModelManager from './model-manager/HTTPModelManager';\nimport HTTPRepository from './repository/HTTPRepository';\nimport httpFactory from './factory/http';\nimport createHTTPClient from './http/createClient';\nimport httpClientConfig from './http/clientConfig';\nimport TransformerInterface from './transformer/TransformerInterface';\nimport InputTransformer from './transformer/InputTransformer';\nimport OutputTransformer from './transformer/OutputTransformer';\nimport CustomTransformer from './transformer/CustomTransformer';\nimport mergeTransformers from './transformer/mergeTransformers';\nimport modelHelpers from './model/modelHelpers';\n\nexport default {\n    Model,\n    DynamicModel,\n    modelHelpers,\n    LocatorInterface,\n    ModelManagerInterface,\n    RepositoryInterface,\n    HTTPLocatorAbstract,\n    HTTPModelManager,\n    HTTPRepository,\n    httpFactory,\n    http: {\n        createClient: createHTTPClient,\n        config: httpClientConfig\n    },\n    transformer: {\n        TransformerInterface,\n        InputTransformer,\n        OutputTransformer,\n        CustomTransformer,\n        mergeTransformers\n    }\n};\n"],"names":["DynamicModel","object","TypeError","prop","hasOwnProperty","JSON","stringify","Interface","Error","LocatorInterface","model","defineInterfaceMethod","id","ModelManagerInterface","modelClass","RepositoryInterface","TransformerInterface","InputTransformer","ModelHelpers","isRaw","isModel","data","descriptor","Object","getOwnPropertyDescriptor","get","_getObjectValue","isRawObject","Model","constructor","value","getData","helpers","OutputTransformer","modelHelpers","LocatorAbstract","getIdPropName","getModelId","length","HTTPModelManager","locator","httpClient","_locator","_client","Promise","resolve","reject","locateById","_getRequestOptions","then","response","createInputTransformer","transform","catch","e","request","requestOptions","createOutputTransformer","isEmptyModelId","post","locate","put","delete","Transformer","getInputTransformerClass","getOutputTransformerClass","additional","HTTPRepository","manager","_modelClass","_manager","HTTPLocatorAbstract","hostPath","basePath","path","getBaseURL","options","getUrl","ClientConfig","assign","_options","createClient","keys","headers","axios","create","config","HTTPFactory","Manager","getModelManagerClass","Repository","getRepositoryClass","createManager","factory","Factory","CustomTransformer","mergeTransformers","transformers","forEach","transformer","createHTTPClient","httpClientConfig"],"mappings":"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"}